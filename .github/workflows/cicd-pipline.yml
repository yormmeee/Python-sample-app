name: CI/CD for Python Web Server

# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - main

jobs:
  # Job 1: Build and Push Docker Image to Amazon ECR
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker for building the image
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Configure AWS credentials for Docker login
      - name: Configure AWS credentials
        run: |
          mkdir -p ~/.aws
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      # Step 4: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      # Step 5: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .

      # Step 6: Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:latest

  # Job 2: Deploy to EKS using Helm
  deploy:
    needs: build  # This ensures the build job completes before deploying
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials for deploying to EKS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
 
      # Step 3: Update kubeconfig for EKS to manage the Kubernetes cluster
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      # Step 4: Deploy the application using Helm
      - name: Deploy to EKS using Helm
        run: |
          helm upgrade --install web-server ./helm \
            --set image.repository=${{ secrets.ECR_REPOSITORY }} \
            --set image.tag=latest \
            --namespace default \
            --reuse-values 
